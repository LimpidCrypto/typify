#[doc = r" Error types."]
pub mod error {
    #[doc = r" Error from a TryFrom or FromStr implementation."]
    pub struct ConversionError(::std::borrow::Cow<'static, str>);
    impl ::std::error::Error for ConversionError {}
    impl ::std::fmt::Display for ConversionError {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> Result<(), ::std::fmt::Error> {
            ::std::fmt::Display::fmt(&self.0, f)
        }
    }
    impl ::std::fmt::Debug for ConversionError {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> Result<(), ::std::fmt::Error> {
            ::std::fmt::Debug::fmt(&self.0, f)
        }
    }
    impl From<&'static str> for ConversionError {
        fn from(value: &'static str) -> Self {
            Self(value.into())
        }
    }
    impl From<String> for ConversionError {
        fn from(value: String) -> Self {
            Self(value.into())
        }
    }
}
#[doc = "Somename"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"properties\": {"]
#[doc = "    \"someproperty\": {"]
#[doc = "      \"$ref\": \"v1/external_references/someothername\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct Somename {
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub someproperty: ::std::option::Option<V1ExternalReferencesSomeothername>,
}
impl From<&Somename> for Somename {
    fn from(value: &Somename) -> Self {
        value.clone()
    }
}
#[doc = "V1ExternalReferencesSomeothername"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"someproperty\": {"]
#[doc = "      \"a\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct V1ExternalReferencesSomeothername {
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub someproperty: ::std::option::Option<::serde_json::Value>,
}
impl From<&V1ExternalReferencesSomeothername> for V1ExternalReferencesSomeothername {
    fn from(value: &V1ExternalReferencesSomeothername) -> Self {
        value.clone()
    }
}
